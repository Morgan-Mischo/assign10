package assign10;

import java.util.Comparator;
import java.util.List;
import java.util.NoSuchElementException;

public class BinaryMaxHeap <E> implements PriorityQueue<E> {
	
	/* Keeps track of the size */
	private int size = 0; 
	
	/* Array for backing */
	private E [] binaryHeap = (E []) new Object [50]; 
	
	/* E that is max */
	private E max = null; 
	
	/* Our comparator */
	private Comparator<E> cmp = null; 
	/**
	 * If this constructor is used to create an empty binary heap, it is assumed that the elements are ordered using their natural ordering 
	 * (i.e., E implements Comparable<? super E>).
	 */
	public BinaryMaxHeap ()
	{
		
	}
	
	
	/**
	 * If this constructor is used to create an empty binary heap, it is assumed that the elements are ordered using the provided Comparator object.
	 */
	public BinaryMaxHeap(Comparator<? super E> cmp)
	{
		
	}
	

	/**
	 * If this constructor is used, then the binary heap is constructed from the given list.  Also, it is assumed that the elements are ordered using
	 *  their natural ordering (i.e., E implements Comparable<? super E>).  RECALL: Using the buildHeap operation, we can construct a binary heap 
	 *  from these N items in O(N) time, which is more efficient than adding them to the binary heap one at a time.  This constructor use such an 
	 *  operation.
	 */
	public BinaryMaxHeap(List<? extends E> list)
	{
		
	}
	
	/**
	 * If this constructor is used, then the binary heap is constructed from the given list (see RECALL note above).  Also, it is assumed that the 
	 * elements are ordered using the provided Comparator object.
	 */
	public BinaryMaxHeap(List<? extends E> list, Comparator<? super E> cmp)
	{
		
	}
	
	/**
	 * Helper method for buildHeap
	 * @return 
	 */
	
	private void buildHeap()
	{
		
	}
	
	/**
	 * Helper method for percolateUp
	 */
	
	private void percolateUp ()
	{
		
	}
	
	/** 
	 * Helper method for percolateDown
	 */
	
	private void percolateDown (int index, E element)
	{
		E left = null; 
		E right = null;
		
		// Case if there are no left and right children
		if (index * 2 > size)
		{
			return;
		}
		
		//Case if there is only a left child
		else if (index * 2 + 1 > size)
		{
			left = binaryHeap[index * 2]; 
			if (innerCompare(element, left) > 0)
			{
				return;
			}
			else
			{
				binaryHeap[index * 2] = element;
				binaryHeap[index] = left;
				index = index * 2;
				percolateDown(index, element);
			}
		}
		
		//Case if there is both a left and right child
		else if (index * 2 + 1 < size && index * 2 < size)
		{
			left = binaryHeap[index * 2]; 
			right = binaryHeap[index * 2 + 1]; 
			
			if (innerCompare(element, left) > 0 && innerCompare(element, right) > 0)
			{
				return; 
			}
			
			if (innerCompare(left, right) > 0)
			{
				binaryHeap[index * 2] = element;
				binaryHeap[index] = left;
				index = index * 2;
				percolateDown(index, element);
			}
			else
			{
				binaryHeap[index * 2 + 1] = element;
				binaryHeap[index] = right;
				index = index * 2 + 1;
				percolateDown(index, element);
			}
		}
		
		
	}
	
	/**
	 * Helper method for innerCompare
	 */
	
	private int innerCompare (E obj1, E obj2)
	{
		if (cmp != null)
		{
			return cmp.compare(obj1, obj2); 
		}

		else 
		{
			return ((Comparable<? super E>) obj1).compareTo(obj2);
		}
	}
	
	@Override
	public void add(E item) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public E peek() throws NoSuchElementException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public E extractMax() throws NoSuchElementException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Object[] toArray() {
		// TODO Auto-generated method stub
		return null;
	}

}
